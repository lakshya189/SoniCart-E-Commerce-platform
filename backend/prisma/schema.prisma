// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(USER)
  avatar    String?
  phone     String?
  addresses Address[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  reviews      Review[]
  cartItems    CartItem[]
  wishlistItems WishlistItem[]
  inventoryAlerts InventoryAlert[]
  stockNotifications StockNotification[]
  userNotifications UserNotification[]
  notificationPreferences NotificationPreference[]

  @@map("users")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  street      String
  city        String
  state       String
  zipCode     String
  country     String  @default("US")
  isDefault   Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model OrderAddress {
  id          String  @id @default(cuid())
  orderId     String
  street      String
  city        String
  state       String
  zipCode     String
  country     String  @default("US")
  type        AddressType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  images      String[]
  categoryId  String
  stock       Int      @default(0)
  sku         String?  @unique
  weight      Float?
  dimensions  String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category      Category       @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  inventoryAlerts InventoryAlert[]
  stockNotifications StockNotification[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2)
  shipping      Decimal     @db.Decimal(10, 2)
  paymentIntentId String?
  paymentStatus   PaymentStatus @default(PENDING)
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  paymentMethod  String?    // 'card', 'paypal', 'cod'
  paypalOrderId  String?
  paypalPayer    String?

  user         User          @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  addresses    OrderAddress[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    ReviewStatus @default(APPROVED)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model InventoryAlert {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  type      AlertType
  threshold Int      // Stock level threshold
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("inventory_alerts")
}

model StockNotification {
  id        String   @id @default(cuid())
  productId String
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stock_notifications")
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?    // Additional data for the notification
  isRead    Boolean  @default(false)
  isEmail   Boolean  @default(false) // Whether email was sent
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}

model NotificationPreference {
  id                    String @id @default(cuid())
  userId                String @unique
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  orderUpdates          Boolean @default(true)
  priceDrops            Boolean @default(true)
  newArrivals           Boolean @default(true)
  stockAlerts           Boolean @default(true)
  marketingEmails       Boolean @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ReturnReason {
  DAMAGED
  WRONG_ITEM
  NOT_AS_DESCRIBED
  BETTER_PRICE
  NO_LONGER_NEEDED
  OTHER
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  BACK_IN_STOCK
}

enum NotificationType {
  LOW_STOCK_ALERT
  OUT_OF_STOCK_ALERT
  BACK_IN_STOCK_ALERT
  PRICE_DROP_ALERT
  NEW_ARRIVAL_ALERT
}